.course-listing {
    position: relative;
    display: flex;
    align-items: start; // If a card is bigger than others in height, this declaration would prevent the rest from getting stretched to match. So, each card would have its own natural height.
    overflow-x: auto;
    scroll-snap-type: x mandatory;

    // The cards inside of this "course-listing" grid have a ":hover" effect that makes them move up by a couple of pixels.
    // Other than than, the add-to-cart buttons, too, have an ":active" effect that makes them move down by a couple of pixels.
    // In CSS, pretty annoyingly, we can't have the overflow visible on one axis and something other than visible the other axis.
    // As such, if alongside "overflow-x: auto;" which we have above, we added an "overflow-y: visible", it wouldn't work, and the parts of the cards or buttons that go up and down on ":hover" and ":active", would be clipped.
    // In order to work around this, we add a 10px pixel vertical padding to the ccontainer so that when the cards or buttons go up and down they don't overflow the container.
    // We then add a vertical margin equal to the negative of the vertical padding we just added in order to compensate for the space created by the padding.
    // The bottom padding also adds a space between the cards and the scrollbar, which I would consider a nice side-effect.
    @include padding-y(10px);
    @include margin-y(-10px);

    // Elements:
    &__swipe-hint {
        margin-bottom: 30px;
    }

    &__item {
        scroll-snap-align: center;
        scroll-snap-stop: always;

        // If we set "scroll-snap-align: center;", Firefox doesn't behave properly and doesn't scroll to the the first and last element.
        // Thus, we set to it "start" for the first, and "end" for the last element, which apparently solves Firefox's problem.
        &:first-child {
            scroll-snap-align: start;
        }
        &:last-child {
            scroll-snap-align: end;
        }
    }

    @include respond($until: small-1) {
        &__item {
            flex: 0 0 100%;

            &:not(:first-child) {
                margin-right: 30px;
            }
        }
    }

    @include respond($from: small-1, $until: small-3) {
        &__item {
            flex: 0 0 300px;

            &:not(:first-child) {
                margin-right: 30px;
            }
        }
    }

    @include respond($from: small-3, $until: large-3) {
        &__item {
            flex: 0 0 340px;

            &:not(:first-child) {
                margin-right: 30px;
            }
        }
    }

    // If the viewport is bigger than a certain size that would allow all the cards to fit within the horizontal space of the container:
    @include respond($from: large-3) {
        &__item {
            flex: 1;

            &:not(:first-child) {
                margin-right: 50px;
            }
        }

        // In that case we also want to hide the swipe hint, as swiping would do nothing in that case since the container can't be scrolled.
        &__swipe-hint {
            display: none;
        }
    }

    // If the user can hover, then that means they're not using a touchscreen, which in turn means they have to use the scrollbar itself to scroll the container.
    // In which case, we would like to style the scrollbar, and hide the swipe hint.
    @include can-hover {
        // For Firefox:
        scrollbar-width: thin;
        // For Chrome, etc:
        &::-webkit-scrollbar {
            height: 7px;
            background-color: #f0f0f0;

            &-thumb {
                background-color: #cdcdcd;

                &:hover {
                    background-color: darken(#cdcdcd, 10%);
                }

                &:active {
                    background-color: darken(#cdcdcd, 20%);
                }
            }
        }

        &__swipe-hint {
            display: none;
        }
    }
}
